/**
 * @fileoverview Template de Exerc√≠cios do Dia 03 - Itens M√≠sticos e Reutiliz√°veis
 * @description Arquivo para os alunos implementarem os conceitos de Generics & Utility Types
 *
 * üìã INSTRU√á√ïES:
 * 1. Complete os exerc√≠cios marcados com "// TODO:"
 * 2. Consulte o arquivo "exercicios.md" para as instru√ß√µes detalhadas
 * 3. Execute este arquivo com:
 *    üöÄ F√ÅCIL: npm run exemplos:dia03 (na raiz do projeto)
 *    üîß MANUAL: npx ts-node docs/semana-01/dia-03/exemplos.ts
 * 4. Use o arquivo "README.md" como refer√™ncia te√≥rica
 */

/* eslint-disable @typescript-eslint/no-unused-vars */

// =============================================================================
// üü¶ FUNDAMENTOS DE GENERICS (EXEMPLO FORNECIDO)
// =============================================================================

// Exemplo de fun√ß√£o gen√©rica simples
function exemploContainer<T>(valor: T): { valor: T; tipo: string } {
  return {
    valor,
    tipo: typeof valor,
  };
}

// Testando o exemplo
const exemploString = exemploContainer('Zanpakuto');
console.log('üì¶ Exemplo:', exemploString);

// =============================================================================
// üèãÔ∏è EXERC√çCIOS N√çVEL INICIANTE - GENERICS B√ÅSICOS
// =============================================================================

// TODO: Exerc√≠cio 1 - Fun√ß√£o Gen√©rica Simples
// Crie uma fun√ß√£o chamada 'criarContainer' que:
// - Aceite um par√¢metro gen√©rico T
// - Retorne um objeto com propriedades: conteudo (T) e tipo (string)
// - Teste com diferentes tipos: string, number, objeto

// TODO: Exerc√≠cio 2 - Array Gen√©rico
// Crie uma fun√ß√£o 'processarLista' que:
// - Aceite um array gen√©rico T[] e uma fun√ß√£o de processamento
// - Retorne um array de strings processadas
// - Teste com array de animes e array de n√∫meros

// =============================================================================
// ‚ö° EXERC√çCIOS N√çVEL INTERMEDI√ÅRIO - CLASSES GEN√âRICAS
// =============================================================================

// TODO: Exerc√≠cio 3 - Classe Gen√©rica
// Crie uma classe 'ColecaoMagica<T>' que:
// - Tenha uma propriedade privada 'itens: T[]'
// - M√©todo 'adicionar(item: T): void'
// - M√©todo 'obterTodos(): T[]'
// - M√©todo 'filtrar(predicado: (item: T) => boolean): T[]'
// - Getter 'tamanho: number'

// TODO: Exerc√≠cio 4 - Interface de Personagem
// Crie uma interface 'PersonagemAnime' com:
// - nome: string
// - anime: string
// - poder: number
// - habilidade: string
// Depois teste sua ColecaoMagica com essa interface

// =============================================================================
// üõ†Ô∏è EXERC√çCIOS N√çVEL INTERMEDI√ÅRIO - UTILITY TYPES
// =============================================================================

// Interface base para os exerc√≠cios (fornecida)
interface AnimeCompleto {
  id: number;
  titulo: string;
  episodios: number;
  status: 'assistindo' | 'concluido' | 'pausado' | 'planejo-assistir';
  nota: number;
  generos: string[];
  estudio: string;
  anoLancamento: number;
  sinopse: string;
}

// TODO: Exerc√≠cio 5 - Utility Type Partial
// Crie um tipo 'AtualizacaoAnime' usando Partial<AnimeCompleto>
// Crie uma fun√ß√£o 'atualizarAnime(id: number, updates: AtualizacaoAnime): void'

// TODO: Exerc√≠cio 6 - Utility Type Pick
// Crie um tipo 'ResumoAnime' usando Pick para selecionar:
// 'titulo', 'episodios', 'nota', 'status'
// Crie uma fun√ß√£o 'exibirResumo(anime: ResumoAnime): void'

// TODO: Exerc√≠cio 7 - Utility Type Omit
// Crie um tipo 'CriarAnime' usando Omit para excluir 'id'
// Crie uma fun√ß√£o 'criarNovoAnime(dados: CriarAnime): AnimeCompleto'

// =============================================================================
// üöÄ EXERC√çCIOS N√çVEL AVAN√áADO - CONSTRAINTS E M√öLTIPLOS GENERICS
// =============================================================================

// TODO: Exerc√≠cio 8 - Constraints
// Crie uma fun√ß√£o 'buscarPorNome<T extends { nome: string }>' que:
// - Aceite uma lista T[] e um nome para buscar
// - Retorne T | undefined
// - Use case-insensitive search

// TODO: Exerc√≠cio 9 - M√∫ltiplos Generics
// Crie uma fun√ß√£o 'mapear<TInput, TOutput>' que:
// - Aceite uma lista TInput[] e uma fun√ß√£o de mapeamento
// - Retorne TOutput[]
// - Teste transformando array de objetos em array de strings

// =============================================================================
// üéØ EXERC√çCIOS EXTRAS - DESAFIO
// =============================================================================

// TODO: Exerc√≠cio 10 - Servi√ßo Gen√©rico (DESAFIO)
// Crie uma interface 'ApiResponse<T>' com:
// - data: T
// - success: boolean
// - message: string
// - timestamp: number
//
// Crie uma classe 'ApiService' com m√©todo:
// - async buscar<T>(endpoint: string): Promise<ApiResponse<T>>

// =============================================================================
// üß™ √ÅREA DE TESTES
// =============================================================================

// Use esta √°rea para testar suas implementa√ß√µes
console.log('üéØ === INICIANDO TESTES ===');

// Exemplo de como testar suas fun√ß√µes:
// const meuContainer = criarContainer('Teste');
// console.log('Resultado:', meuContainer);

console.log('‚úÖ Testes conclu√≠dos!');

// =============================================================================
// üì§ EXPORTS (mantenha comentado at√© completar os exerc√≠cios)
// =============================================================================

// export {
//   criarContainer,
//   processarLista,
//   ColecaoMagica,
//   buscarPorNome,
//   mapear,
//   ApiService,
//   type PersonagemAnime,
//   type AnimeCompleto,
//   type AtualizacaoAnime,
//   type ResumoAnime,
//   type CriarAnime,
//   type ApiResponse,
// };
